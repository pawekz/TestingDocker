name: Build and Deploy to Azure Container Apps

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Upgrade Azure CLI
        run: |
          az upgrade --yes
          az extension add --name containerapp

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry (ACR)
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Prepare Config Files
        run: |
          sed -i "s|#{SUBSCRIPTION_ID}#|${{ secrets.AZURE_SUBSCRIPTION_ID }}|g" ./frontend2/containerapp.yaml
          sed -i "s|#{SUBSCRIPTION_ID}#|${{ secrets.AZURE_SUBSCRIPTION_ID }}|g" ./backend/containerapp.yaml
          sed -i "s|#{CONTAINER_IMAGE}#|${{ secrets.AZURE_CONTAINER_REGISTRY }}/backend-tooltrack:${{ github.sha }}|g" ./backend/containerapp.yaml
          sed -i "s|#{CONTAINER_IMAGE}#|${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend-tooltrack:${{ github.sha }}|g" ./frontend2/containerapp.yaml
          sed -i "s|#{REGISTRY_SERVER}#|${{ secrets.AZURE_CONTAINER_REGISTRY }}|g" ./backend/containerapp.yaml
          sed -i "s|#{REGISTRY_SERVER}#|${{ secrets.AZURE_CONTAINER_REGISTRY }}|g" ./frontend2/containerapp.yaml
          sed -i "s|#{REGISTRY_USERNAME}#|${{ secrets.REGISTRY_USERNAME }}|g" ./backend/containerapp.yaml
          sed -i "s|#{REGISTRY_USERNAME}#|${{ secrets.REGISTRY_USERNAME }}|g" ./frontend2/containerapp.yaml
          sed -i "s|#{REGISTRY_PASSWORD}#|${{ secrets.REGISTRY_PASSWORD }}|g" ./backend/containerapp.yaml
          sed -i "s|#{REGISTRY_PASSWORD}#|${{ secrets.REGISTRY_PASSWORD }}|g" ./frontend2/containerapp.yaml

      - name: Check if Backend App Exists
        run: |
          RESOURCE_EXISTS=$(az containerapp show --name tooltrack-backend-app --resource-group testingdocker --query "name" -o tsv 2>/dev/null || echo "notfound")
          if [[ "$RESOURCE_EXISTS" == "notfound" || -z "$RESOURCE_EXISTS" ]]; then
            echo "Backend app doesn't exist, will be created by the deployment step."
          else
            echo "Backend app already exists, skipping creation."
          fi

      - name: Deploy backend to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: testingdockercr
          acrUsername: ${{ secrets.REGISTRY_USERNAME }}
          acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppName: tooltrack-backend-app
          resourceGroup: testingdocker
          containerAppEnvironment: tooltrack-env-sea
          location: southeastasia
          appSourcePath: ./backend
          imageToBuild: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/backend-tooltrack:${{ github.sha }}
          imageToDeploy: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/backend-tooltrack:${{ github.sha }}
          yamlConfigPath: ./backend/containerapp.yaml
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Update Backend Database Connection
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az containerapp update --name tooltrack-backend-app --resource-group testingdocker \
              --set-env-vars SPRING_DATASOURCE_URL=jdbc:sqlserver://testingdockerserver.database.windows.net:1433;databaseName=testingdockerdb;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.database.windows.net;loginTimeout=30 \
              SPRING_DATASOURCE_USERNAME=${{ secrets.SQL_USERNAME }} \
              SPRING_DATASOURCE_PASSWORD=${{ secrets.SQL_PASSWORD }}

      - name: Deploy frontend to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: testingdockercr
          acrUsername: ${{ secrets.REGISTRY_USERNAME }}
          acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppName: tooltrack-frontend-app
          resourceGroup: testingdocker
          containerAppEnvironment: tooltrack-env-sea
          location: southeastasia
          appSourcePath: ./frontend2
          imageToBuild: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend-tooltrack:${{ github.sha }}
          imageToDeploy: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend-tooltrack:${{ github.sha }}
          yamlConfigPath: ./frontend2/containerapp.yaml
        env:
          SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Update Frontend Configuration
        uses: azure/CLI@v2
        with:
          inlineScript: |
            BACKEND_URL=$(az containerapp show --name tooltrack-backend-app --resource-group testingdocker --query "properties.configuration.ingress.fqdn" -o tsv)
            if [[ -z "$BACKEND_URL" ]]; then
              echo "Error: Failed to retrieve backend URL."
              exit 1
            fi
            az containerapp update --name tooltrack-frontend-app --resource-group testingdocker \
              --set-env-vars VITE_API_URL=https://$BACKEND_URL
            az containerapp ingress update --name tooltrack-frontend-app --resource-group testingdocker --target-port 3000